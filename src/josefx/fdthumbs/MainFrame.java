/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Mar 11, 2011, 9:39:35 PM
 */
package josefx.fdthumbs;

import java.awt.AWTEvent;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JProgressBar;
import javax.swing.RowFilter;
import javax.swing.SwingWorker;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.plaf.basic.BasicListUI.ListSelectionHandler;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author josefx
 */
public class MainFrame extends javax.swing.JFrame {

    private ThumbTableModel thumbTableModel = new ThumbTableModel();

    public void updateTable() {
        thumbTableModel.clear();
        SwingWorker<Void, ThumbData> worker =new ThumbsUpdater(this.thumbTableModel);

        worker.execute();
    }
    private void deleteSelected(){
        final int[] selection = thumbsTable.getSelectedRows();
        if(selection.length == 0)return;
        for(int i = 0; i < selection.length;++i)
            selection[i]=thumbsTable.convertRowIndexToModel(selection[i]);
        final List<ThumbData> selData = new ArrayList<ThumbData>(selection.length*2);
        for(int item : selection)
            selData.add(thumbTableModel.getThumbData(item));
        final JDialog progress = new JDialog(this);
        final JProgressBar pbar = new JProgressBar(0, selData.size());
        progress.add(pbar);
        progress.pack();
        progress.setVisible(true);
        
        SwingWorker<Void,Integer> sw = new SwingWorker<Void, Integer>() {

            @Override
            protected Void doInBackground() throws Exception {
                for(int i = 0; i < selData.size(); i++){
                    new File(selData.get(i).getThumb()).delete();
                    process(Arrays.asList(i));
                }
                return null;
            }

            @Override
            protected void process(List<Integer> chunks) {
                super.process(chunks);
                pbar.setValue(chunks.get(0));
                if(chunks.get(0)== selData.size()-1){
                    progress.dispose();
                    updateTable();
                }
                
            }

        };
        sw.execute();


    }

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        this.thumbsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){

            @Override
            public void valueChanged(ListSelectionEvent lse) {
                thumbsTable.removeEditor();
                if(lse.getValueIsAdjusting())return;
                delButton.setEnabled(!thumbsTable.getSelectionModel().isSelectionEmpty());
               
            }
            
        });
    }
    /**
     * 
     */
    
      
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        delButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        filterLabel = new javax.swing.JLabel();
        filterField = new javax.swing.JTextField();
        thumbsTableScroll = new javax.swing.JScrollPane();
        thumbsTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FreeDesktop Thumbs");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton1.setText("Update");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        delButton.setText("Delete");
        delButton.setEnabled(false);
        delButton.setFocusable(false);
        delButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        delButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        delButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(delButton);
        jToolBar1.add(jSeparator1);

        filterLabel.setText("Filter:");
        jToolBar1.add(filterLabel);

        filterField.setBackground(java.awt.Color.white);
        filterField.setColumns(15);
        filterField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                filterFieldKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterFieldKeyReleased(evt);
            }
        });
        jToolBar1.add(filterField);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        thumbsTable.setAutoCreateRowSorter(true);
        thumbsTable.setModel(thumbTableModel);
        thumbsTable.setFillsViewportHeight(true);
        thumbsTable.setOpaque(false);
        thumbsTable.setRowHeight(96);
        thumbsTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        thumbsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                thumbsTableMouseClicked(evt);
            }
        });
        thumbsTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                thumbsTablePropertyChange(evt);
            }
        });
        thumbsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                thumbsTableKeyTyped(evt);
            }
        });
        thumbsTableScroll.setViewportView(thumbsTable);
        thumbsTable.setDefaultRenderer(ThumbData.class, new ThumbDataRenderer());
        thumbsTable.setDefaultRenderer(Icon.class, new IconRenderer());
        thumbsTable.setDefaultEditor(ThumbData.class, new ThumbDataRenderer());
        thumbsTable.getColumnModel().getColumn(0).setCellEditor(new ThumbDataRenderer());
        final TableRowSorter<ThumbTableModel> sorter = new TableRowSorter<ThumbTableModel>(thumbTableModel);
        thumbsTable.setRowSorter(sorter);

        sorter.setStringConverter(new ThumbDataStringConverter());
        sorter.setComparator(0, new ThumbComparator());

        getContentPane().add(thumbsTableScroll, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        jMenu1.add(menuExit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        updateTable();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void delButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delButtonActionPerformed
       deleteSelected();
    }//GEN-LAST:event_delButtonActionPerformed

    private void thumbsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_thumbsTableMouseClicked
       if(evt.getButton() == MouseEvent.BUTTON1 &&evt.getClickCount()>=2)
           openSelected();
       
    }//GEN-LAST:event_thumbsTableMouseClicked

    private void thumbsTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_thumbsTableKeyTyped
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            openSelected();
    }//GEN-LAST:event_thumbsTableKeyTyped

    private void thumbsTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_thumbsTablePropertyChange
       
    }//GEN-LAST:event_thumbsTablePropertyChange

    private void filterFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterFieldKeyTyped
       
        
    }//GEN-LAST:event_filterFieldKeyTyped
    
    @SuppressWarnings("unchecked")
    private void filterFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterFieldKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            final String filter = this.filterField.getText();
            try{
                
                final RowFilter<TableModel,Object> filt = RowFilter.regexFilter(filter);
                final TableRowSorter<TableModel> sort = ((TableRowSorter<TableModel>)this.thumbsTable.getRowSorter());
                sort.setRowFilter(filt);
                
            }catch(PatternSyntaxException ex){
                filterField.setBackground(Color.red);
            }
        }else{
            this.filterField.setBackground(Color.WHITE);
        }
    }//GEN-LAST:event_filterFieldKeyReleased

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        
        this.dispose();
    }//GEN-LAST:event_menuExitActionPerformed

    private void openSelected(){
        
            final int i = thumbsTable.getSelectedRow();
            if (i == -1) {
                return;
            }
            final int modInd = thumbsTable.convertRowIndexToModel(i);
            ThumbData td = thumbTableModel.getThumbData(modInd);
            File f = new File(td.getOriginal());
            if (f.exists()) {
                try {
                    Desktop.getDesktop().open(f);
                } catch (IOException ex) {
                }
            }
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton delButton;
    private javax.swing.JTextField filterField;
    private javax.swing.JLabel filterLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JTable thumbsTable;
    private javax.swing.JScrollPane thumbsTableScroll;
    // End of variables declaration//GEN-END:variables

}
